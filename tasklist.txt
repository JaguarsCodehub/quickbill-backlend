- Product Master by Group Name, then create orders https://quickbillbook.com/SalesOrder.aspx Done ✅
- Need to validate inputs and need to implement the above feature too Done ✅
- Get Items / Products from ItemMaster Table and need to show in the dropdown list in the frontend Done ✅
- Implement the above for the backend API too Done ✅

- Sales: Invoice - Sales T, SL, RS, SAL
		 Return - Sales T, SL, NS, SRT
		 Inside Sales Table
         Need to create endpoints for the Invoice and Return inside sales table

Select top 1 isnull(DocNo,0) as SRL from sales 
						where 
						 [Type]=@Type 
						and Prefix=@Prefix
						and CompanyID=@CompanyID
						and UserID=@UserID
						order by DocNo desc
- Get Items / Products from ItemMaster Table and need to show in the dropdown list in the frontend Done ✅
- Implement the above for the backend API too Done ✅
- Need to validate the inputs in the dropdown list in the frontend Done ✅
- Whole User Interface needs to be redesigned and improved Done ✅
- Need to add the validation for the inputs in the User Interface Done ✅
- Multiple Orders need to be saved to a Single Invoice (Table) Done ✅
- Calculation of Total Order with all the taxes and amounts needs to be done Done ✅

Mostly all the Backend Work is Done, Only the Individual Comparison Chart and Attachments are Left

- Rounding Off the Amount and Pending in the Outstanding Table

// Insert into Outstanding table
        const outstandingQuery = `
            INSERT INTO Outstanding (
                Branch, MainType, SubType, Type, Prefix, Srl, Sno,
                aMainType, aSubType, aType, aPrefix, aSerial, aSno,
                CurrName, CurrRate, DocDate, Code, Amount, Pending,
                Flag, BillNumber, BillDate, CrPeriod, TdsAmt,
                OpnPending, OrdNumber, OrdDate, OpFlag, RefParty,
                Remark, ncode, AdvanceWithGST, UserID, CompanyID,
                TransactionNumber, CreatedBy, CreatedDate, ModifiedBy, ModifiedDate
            )
            VALUES (
                @Branch, @MainType, @SubType, @Type, @Prefix, @Srl, @Sno,
                @aMainType, @aSubType, @aType, @aPrefix, @aSerial, @aSno,
                @CurrName, @CurrRate, @DocDate, @Code, ROUND(@Amount, 0), ROUND(@Pending, 0),
                @Flag, @BillNumber, @BillDate, @CrPeriod, @TdsAmt,
                @OpnPending, @OrdNumber, @OrdDate, @OpFlag, @RefParty,
                @Remark, @ncode, @AdvanceWithGST, @UserID, @CompanyID,
                @TransactionNumber, @CreatedBy, GETDATE(), @ModifiedBy, GETDATE()
            )`;

        await connection.request()
            .input('Branch', sql.VarChar(6), '')
            .input('MainType', sql.VarChar(2), 'SL')
            .input('SubType', sql.VarChar(2), 'RS')
            .input('Type', sql.VarChar(3), 'SAL')
            .input('Prefix', sql.VarChar(8), prefix)
            .input('Srl', sql.VarChar(35), docNo)
            .input('Sno', sql.VarChar(5), '00001')
            .input('aMainType', sql.VarChar(2), 'SL')
            .input('aSubType', sql.VarChar(2), 'RS')
            .input('aType', sql.VarChar(3), 'SAL')
            .input('aPrefix', sql.VarChar(8), prefix)
            .input('aSerial', sql.VarChar(35), docNo)
            .input('aSno', sql.VarChar(5), '00001')
            .input('CurrName', sql.VarChar(10), '')
            .input('CurrRate', sql.Money, 0)
            .input('DocDate', sql.DateTime, docDate)
            .input('Code', sql.VarChar(30), customerCode)
            .input('Amount', sql.Money, billAmt)
            .input('Pending', sql.Money, billAmt)
            .input('Flag', sql.VarChar(1), 'D')
            .input('BillNumber', sql.VarChar(255), billNo)
            .input('BillDate', sql.DateTime, billDate)
            .input('CrPeriod', sql.Int, 0)
            .input('TdsAmt', sql.Money, 0)
            .input('OpnPending', sql.Money, 0)
            .input('OrdNumber', sql.VarChar(255), '')
            .input('OrdDate', sql.DateTime, null)
            .input('OpFlag', sql.VarChar(1), '')
            .input('RefParty', sql.VarChar(9), '')
            .input('Remark', sql.VarChar(500), '')
            .input('ncode', sql.VarChar(50), '')
            .input('AdvanceWithGST', sql.Bit, 0)
            .input('UserID', sql.Int, userId)
            .input('CompanyID', sql.Int, companyId)
            .input('TransactionNumber', sql.VarChar(50), transactionNumber)
            .input('CreatedBy', sql.Int, createdBy)
            .input('ModifiedBy', sql.Int, modifiedBy)
            .query(outstandingQuery);

        res.status(201).json({
            message: 'Invoice and Outstanding entry created successfully'
        });